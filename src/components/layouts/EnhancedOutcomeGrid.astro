---
import EnhancedOutcomeCard from '../EnhancedOutcomeCard.astro';

interface Outcome {
  stat?: string;
  description: string;
  colorClass?: 'primary' | 'secondary' | 'accent';
  variant?: 'with-stat' | 'text-only';
}

interface Props {
  outcomes: Outcome[];
  columns?: 2 | 3 | 4 | 6 | 'auto';
  animateOnScroll?: boolean;
}

const { 
  outcomes, 
  columns = 'auto',
  animateOnScroll = true
} = Astro.props;

// Default colors if none specified
const defaultColors = ['primary', 'secondary', 'accent'];

// Determine grid class based on number of items and columns setting
const getGridClass = () => {
  if (columns !== 'auto') return `columns-${columns}`;
  
  // Auto-determine best column layout based on number of items
  const count = outcomes.length;
  if (count <= 2) return 'columns-2';
  if (count === 3) return 'columns-3';
  if (count === 4) return 'columns-4';
  if (count <= 6) return 'columns-3'; // 5-6 items work well in 3 columns
  return 'columns-auto'; // Fallback for more items
};

const gridClass = getGridClass();
---

<div class={`enhanced-outcome-grid ${gridClass} ${animateOnScroll ? 'animate-on-scroll' : ''}`}>
  {outcomes.map((outcome, index) => (
    <div class="outcome-wrapper" data-delay={index}>
      <EnhancedOutcomeCard
        stat={outcome.stat}
        description={outcome.description}
        colorClass={outcome.colorClass || defaultColors[index % defaultColors.length]}
        variant={outcome.variant || 'with-stat'}
      />
    </div>
  ))}
</div>

<style>
  .enhanced-outcome-grid {
    display: grid;
    gap: 1.5rem;
    margin-bottom: 3rem;
  }

  /* Column layouts */
  .columns-2 {
    grid-template-columns: repeat(2, 1fr);
  }

  .columns-3 {
    grid-template-columns: repeat(3, 1fr);
  }

  .columns-4 {
    grid-template-columns: repeat(4, 1fr);
  }

  .columns-6 {
    grid-template-columns: repeat(6, 1fr);
  }

  .columns-auto {
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  }

  /* Animation wrapper */
  .outcome-wrapper {
    display: contents;
  }

  /* Animation on scroll */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-on-scroll .outcome-wrapper > :global(.enhanced-outcome-card) {
    opacity: 0;
  }

  /* Staggered animations for up to 6 items */
  .animate-on-scroll .outcome-wrapper[data-delay="0"] > :global(.enhanced-outcome-card) {
    animation: fadeInUp 0.6s ease 0.1s forwards;
  }

  .animate-on-scroll .outcome-wrapper[data-delay="1"] > :global(.enhanced-outcome-card) {
    animation: fadeInUp 0.6s ease 0.2s forwards;
  }

  .animate-on-scroll .outcome-wrapper[data-delay="2"] > :global(.enhanced-outcome-card) {
    animation: fadeInUp 0.6s ease 0.3s forwards;
  }

  .animate-on-scroll .outcome-wrapper[data-delay="3"] > :global(.enhanced-outcome-card) {
    animation: fadeInUp 0.6s ease 0.4s forwards;
  }

  .animate-on-scroll .outcome-wrapper[data-delay="4"] > :global(.enhanced-outcome-card) {
    animation: fadeInUp 0.6s ease 0.5s forwards;
  }

  .animate-on-scroll .outcome-wrapper[data-delay="5"] > :global(.enhanced-outcome-card) {
    animation: fadeInUp 0.6s ease 0.6s forwards;
  }

  /* Responsive layouts */
  @media (max-width: 1200px) {
    .columns-6 {
      grid-template-columns: repeat(3, 1fr);
    }
    
    .columns-4 {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 768px) {
    .enhanced-outcome-grid {
      gap: 1rem;
    }
    
    .columns-2,
    .columns-3,
    .columns-4,
    .columns-6 {
      grid-template-columns: 1fr;
    }
  }

  /* Reduce motion preference */
  @media (prefers-reduced-motion: reduce) {
    .animate-on-scroll .outcome-wrapper > :global(.enhanced-outcome-card) {
      opacity: 1;
      animation: none;
    }
  }
</style>