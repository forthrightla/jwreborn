---
interface Step {
  title: string;
  description: string;
  image?: string;
}

interface Props {
  steps: Step[];
}

const { steps } = Astro.props;
---

<div class="process-steps">
  {steps.map((step, index) => (
    <div class="process-step">
      <div class="step-number">{index + 1}</div>
      <div class="step-content">
        <div class="step-text">
          <h3>{step.title}</h3>
          <p>{step.description}</p>
        </div>
        {step.image && (
          <div class="step-image">
            <img src={step.image} alt={step.title} />
          </div>
        )}
      </div>
    </div>
  ))}
</div>

<style>
  .process-steps {
    display: flex;
    flex-direction: column;
    gap: 4rem;
    margin-bottom: 3rem;
    position: relative;
  }
  
  .process-step {
    display: flex;
    gap: 2rem;
    position: relative;
  }
  
  .step-number {
    background-color: #f93b6b;
    color: white;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    font-weight: bold;
    flex-shrink: 0;
    z-index: 2;
  }
  
  .step-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
    align-items: center;
    flex-grow: 1;
  }
  
  .step-text h3 {
    font-size: 1.4rem;
    margin-bottom: 1rem;
    color: #00296b;
  }
  
  .step-text p {
    font-size: 1.1rem;
    line-height: 1.6;
    color: #49535a;
  }
  
  .step-image img {
    width: 100%;
    border-radius: 16px;
    box-shadow: 0 5px 20px rgba(0,0,0,0.1);
  }
  
  /* Connect the step numbers with a line */
  .process-steps:after {
    content: '';
    position: absolute;
    top: 0;
    bottom: 0;
    left: 25px;
    width: 2px;
    background-color: #e8e8e8;
    z-index: 1;
  }
  
  @media (max-width: 768px) {
    .step-content {
      grid-template-columns: 1fr;
    }
    
    .step-image {
      order: -1;
    }
  }
</style>