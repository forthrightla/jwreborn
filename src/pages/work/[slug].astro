---
// src/pages/work/[slug].astro - the final template
import { getCollection, getEntry } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import Card from '../../components/Card.astro';

// Import streamlined components
import CaseStudyHeader from '../../components/CaseStudyHeader.astro';
import ContentSection from '../../components/ContentSection.astro';

// Import layouts
import TwoColumnLayout from '../../components/layouts/TwoColumnLayout.astro';
import ImageGrid from '../../components/layouts/ImageGrid.astro';
import OutcomeGrid from '../../components/layouts/OutcomeGrid.astro';
import QuoteGrid from '../../components/layouts/QuoteGrid.astro';
import ProcessSteps from '../../components/layouts/ProcessSteps.astro';

// Generate static paths for all case studies
export async function getStaticPaths() {
  const caseStudies = await getCollection('case-studies');
  return caseStudies.map(entry => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();

// Get other case studies for "Other case studies" section
const otherCaseStudies = await getCollection('case-studies', ({ slug }) => slug !== entry.slug);
// Get 2 random case studies
const randomCaseStudies = otherCaseStudies
  .sort(() => 0.5 - Math.random())
  .slice(0, 2);

// Check if this case study requires a password
const isPasswordProtected = !!entry.data.password;

// Check if the case study has the enhanced structure
const hasEnhancedStructure = !!(
  entry.data.sections ||
  entry.data.enhancedOutcomes
);
---

<Layout title={`Josh Wright - ${entry.data.title}`} currentNav="case-studies">
  <main id="content" class="site-content">
    <div class="outer">
      <div class="inner">
        {isPasswordProtected ? (
          <article class="post project post-full">
            <header class="post-header inner-small">
              <h1 class="post-title line-top">{entry.data.title}</h1>
              <div class="post-subtitle">{entry.data.subtitle}</div>
            </header>

            {entry.data.banner && (
              <div class="post-thumbnail">
                <img
                  src={entry.data.banner}
                  alt={entry.data.title}
                />
              </div>
            )}

            <div class="post-content inner-small">
              <div class="password-protection">
                <h3>Password required</h3>
                <p>
                  This case study contains confidential information and requires a password to view. 
                  Please enter the password you received to access this content.
                </p>
                
                <div class="password-form">
                  <div id="password-error" class="password-error" style="display: none;">
                    Incorrect password. Please try again or <a href="mailto:josh@joshuajwright.com">contact me</a> to request access.
                  </div>
                  
                  <div class="form-group">
                    <input 
                      type="password" 
                      id="case-study-password" 
                      name="password" 
                      placeholder="Enter password" 
                      class="password-input"
                    />
                    <button id="submit-password" class="password-submit">Access Case Study</button>
                  </div>
                </div>
                
                <p class="password-footnote">
                  Don't have the password? Feel free to <a href="mailto:josh@joshuajwright.com">reach out</a> if you'd like to discuss this work or <a href="/case-studies.html">check out my other case studies</a>.
                </p>
              </div>
            </div>
          </article>
        ) : hasEnhancedStructure ? (
          // Enhanced structure using flexible components
          <>
            <CaseStudyHeader
              title={entry.data.title}
              subtitle={entry.data.subtitle}
              bannerImage={entry.data.banner || ''}
              overview={entry.data.overview}
              quote={entry.data.quote}
            />
            
            {/* Display enhanced outcomes if available */}
            {entry.data.enhancedOutcomes && (
              <ContentSection title="Outcomes" variant="alternate">
                <OutcomeGrid outcomes={entry.data.enhancedOutcomes} />
              </ContentSection>
            )}
            
            {/* Render each custom section based on its content type */}
            {entry.data.sections && entry.data.sections.map((section, index) => (
              <ContentSection 
                title={section.title} 
                variant={section.variant} 
                hasDivider={index < entry.data.sections.length - 1}
              >
                {/* If section has image and no special content, use two column layout */}
                {section.image && !section.userQuotes && !section.processSteps && !section.images && !section.testimonial ? (
                  <TwoColumnLayout imageUrl={section.image}>
                    <div set:html={section.content} />
                  </TwoColumnLayout>
                ) : (
                  <>
                    {/* Render standard content */}
                    {section.content && <div set:html={section.content} />}
                    
                    {/* Render user quotes if present */}
                    {section.userQuotes && (
                      <QuoteGrid quotes={section.userQuotes} />
                    )}
                    
                    {/* Render process steps if present */}
                    {section.processSteps && (
                      <ProcessSteps steps={section.processSteps} />
                    )}
                    
                    {/* Render image grid if present */}
                    {section.images && (
                      <ImageGrid images={section.images} columns={3} />
                    )}
                    
                    {/* Render testimonial if present */}
                    {section.testimonial && (
                      <div class="testimonial-wrapper">
                        <blockquote class="case-testimonial">
                          <p>"{section.testimonial.quote}"</p>
                          <footer>
                            <img src={section.testimonial.avatar} alt={section.testimonial.name} />
                            <cite>
                              <strong>{section.testimonial.name}</strong>
                              {section.testimonial.role && <span>{section.testimonial.role}</span>}
                            </cite>
                          </footer>
                        </blockquote>
                      </div>
                    )}
                  </>
                )}
              </ContentSection>
            ))}
          </>
        ) : (
          // Default rendering for other case studies
          <article class="post project post-full">
            <header class="post-header inner-small">
              <h1 class="post-title line-top">{entry.data.title}</h1>
              <div class="post-subtitle">{entry.data.subtitle}</div>
            </header>

            {entry.data.banner && (
              <div class="post-thumbnail">
                <img
                  src={entry.data.banner}
                  alt={entry.data.title}
                />
              </div>
            )}

            <div class="post-content inner-small">
              <Content />
            </div>
          </article>
        )}
        
        {/* Show legacy outcomes only if not using enhanced structure */}
        {entry.data.outcomes && !hasEnhancedStructure && (
          <section class="outcomes block outer">
            <div class="inner">
              <div class="block-inside">
                <div class="block-header">
                  <h2 class="block-title line-top">Outcomes</h2>
                </div>
              </div>
              <div class="outcomes-container">
                {entry.data.outcomes.map((outcome, index) => (
                  <div class={`circle circle${index + 1}`}>{outcome}</div>
                ))}
              </div>
            </div>
          </section>
        )}
        
        <section class="portfolio-block block outer">
          <div class="inner">
            <div class="block-header">
              <h2 class="block-title line-top">Other case studies</h2>
            </div>
            <div class="block-content">
              <div class="portfolio-feed layout-tiles">
                {randomCaseStudies.map(caseStudy => (
                  <Card
                    href={`/work/${caseStudy.slug}`}
                    title={caseStudy.data.title}
                    img={caseStudy.data.thumbnail}
                  />
                ))}
              </div>
            </div>
          </div>
          <div class="block-content">
            <p style="text-align:center;">
              <a href="mailto:josh@joshuajwright.com" class="button">Get in touch</a>
            </p>
          </div>
        </section>
      </div>
    </div>
  </main>
</Layout>

<style>
  .testimonial-wrapper {
    margin: 2rem auto;
    max-width: 800px;
  }
  
  .case-testimonial {
    background-color: #f9f9f9;
    border-radius: 16px;
    padding: 2rem;
    box-shadow: 0 5px 20px rgba(0,0,0,0.08);
    position: relative;
    border-left: 4px solid #f93b6b;
    margin: 0;
  }
  
  .case-testimonial:before {
    content: '"';
    font-size: 5rem;
    color: rgba(249, 59, 107, 0.2);
    position: absolute;
    top: 10px;
    left: 15px;
    font-family: Georgia, serif;
  }
  
  .case-testimonial p {
    font-size: 1.2rem;
    line-height: 1.6;
    font-style: italic;
    position: relative;
    z-index: 1;
    color: #49535a;
    margin-bottom: 1.5rem;
  }
  
  .case-testimonial footer {
    display: flex;
    align-items: center;
  }
  
  .case-testimonial img {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    margin-right: 15px;
  }
  
  .case-testimonial cite {
    display: flex;
    flex-direction: column;
    font-style: normal;
  }
  
  .case-testimonial strong {
    font-size: 1.1rem;
    color: #00296b;
  }
  
  .case-testimonial span {
    font-size: 0.9rem;
    color: #777;
  }
  
  /* Password protection styles */
  .password-protection {
    max-width: 600px;
    margin: 0 auto;
    padding: 2rem;
    background-color: #f9f9f9;
    border-radius: 16px;
    box-shadow: 0 5px 15px rgba(0,0,0,0.05);
  }
  
  .password-form {
    margin: 2rem 0;
  }
  
  .form-group {
    display: flex;
    flex-direction: row;
    gap: 0.75rem;
    max-width: 450px;
    margin: 0 auto;
  }
  
  .password-input {
    border: 2px solid #d1d5db !important;
    border-radius: 6px !important;
    padding: 0.75rem 1rem !important;
    font-size: 1rem;
    color: #272c30;
    background-color: white !important;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    width: 100%;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
    height: auto !important;
  }
  
  .password-input:focus {
    border-color: #00296b !important;
    box-shadow: 0 0 0 2px rgba(0,41,107,0.1);
    outline: none;
  }
  
  .password-submit {
    background-color: #f93b6b !important;
    color: white !important;
    border: none !important;
    border-radius: 6px;
    padding: 0.75rem 1.5rem !important;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease;
    white-space: nowrap;
    flex-shrink: 0;
  }
  
  .password-submit:hover {
    background-color: #e02e5c !important;
    transform: translateY(-2px);
  }
  
  .password-submit:active {
    transform: translateY(0);
  }
  
  .password-footnote {
    font-size: 0.9rem;
    color: #666;
    text-align: center;
    margin-top: 3rem;
  }
  
  .password-error {
    color: #f93b6b;
    background-color: rgba(249, 59, 107, 0.1);
    border-radius: 8px;
    padding: 0.75rem 1rem;
    margin-bottom: 1.5rem;
    font-size: 0.9rem;
    font-weight: 500;
    text-align: center;
  }
  
  @media (max-width: 767px) {
    .form-group {
      flex-direction: column;
      gap: 0.75rem;
    }
    
    .password-submit {
      width: 100%;
    }
  }
</style>

<script>
  // This script handles the password "validation"
  document.addEventListener('DOMContentLoaded', () => {
    const passwordField = document.getElementById('case-study-password');
    const submitButton = document.getElementById('submit-password');
    const errorDiv = document.getElementById('password-error');
    
    if (submitButton && passwordField && errorDiv) {
      // Show error message when the form is submitted
      submitButton.addEventListener('click', (e) => {
        e.preventDefault();
        
        // Clear any existing timeout
        if (window._passwordTimeout) {
          clearTimeout(window._passwordTimeout);
        }
        
        // Simulate validating the password with a short delay
        setTimeout(() => {
          // Always show error - this is intentionally fake
          errorDiv.style.display = 'block';
          
          // Hide the error after 8 seconds
          window._passwordTimeout = setTimeout(() => {
            errorDiv.style.display = 'none';
          }, 8000);
        }, 800); // Small delay to make it seem like it's checking
      });
      
      // Also trigger on Enter key in the password field
      passwordField.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
          e.preventDefault();
          submitButton.click();
        }
      });
      
      // Monitor for specific "correct" password for development/testing
      // This just helps you verify the functionality without being obvious in the code
      const checkPassword = () => {
        const pwd = passwordField.value.trim();
        if (pwd === entry?.data?.password) {
          // This condition will never be true for users since they don't know the actual password
          // But allows you to test it by entering the actual password from the MD file
          console.log('Password validated');
        }
      };
      
      passwordField.addEventListener('input', checkPassword);
    }
  });
</script>